{"version":3,"sources":["containers/SettingsGeneral/SettingsGeneral.tsx","pages/SettingsPage/SettingsGeneralPage.tsx"],"names":["validateMainInfo","name","errors","validateFormValues","isEmpty","connect","state","user","props","imageInputRef","useRef","useState","pending","setPending","serverErrors","setServerErrors","img","userPhotoUrl","setUserPhotoUrl","cropperPhotoUrl","setCropperPhotoUrl","url","file","croppedPhoto","setCroppedPhoto","useToggle","isAvaCropPage","setIsAvaCropPage","deletePhoto","window","confirm","onSelectImage","e","target","files","length","reader","FileReader","onloadend","type","startsWith","setPhotoHandler","readAsDataURL","URL","createObjectURL","setTimeout","onCrop","API","updateUserAvatar","then","catch","err","response","data","console","error","className","ReturnBtn","route","initialValues","validate","onSubmit","values","updateUser","handleSubmit","submitting","DelayedComponent","isMount","delayUnmountTime","classModifier","ImgCropper","image","onCancel","aspect","cropShape","classPrefix","LazyLoadImage","src","getContactAvatar","alt","onClick","accept","ref","onChange","current","value","style","display","click","errorInputClass","errorClass","component","FormTextInput","placeholder","FormTextTextarea","rows","AsyncBtn","spinnerSize","disabled","SettingsGeneralPage","log"],"mappings":"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","file":"static/js/SettingsGeneralChunk.ef96103e.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\n\nimport API from \"../../api/api\";\nimport { useToggle } from \"../../hooks\";\nimport { classModifier, getContactAvatar } from \"../../utils\";\nimport { AppState } from \"../../redux/store\";\nimport { IAgent, IAgency } from \"../../interfaces/interfaces\";\nimport validateFormValues from \"../../utils/validateFormValues\";\n\nimport \"./SettingsGeneral.scss\";\nimport { ReactComponent as TrashIcon } from \"../../icons/trash.svg\";\nimport FormTextInput from \"../../components/FormTextInput\";\nimport FormTextTextarea from \"../../components/FormTextarea\";\nimport LazyLoadImage from \"../../components/LazyLoadImage/LazyLoadImage\";\nimport DelayedComponent from \"../../components/DelayedComponent/DelayedComponent\";\nimport ImgCropper from \"../../components/ImgCropper/ImgCropper\";\nimport AsyncBtn from \"../../components/AsyncBtn/AsyncBtn\";\nimport ReturnBtn from \"../../components/ReturnBtn/ReturnBtn\";\n\ninterface IUpdateUserForm {\n  name: string;\n  img?: Blob;\n  url?: string;\n  phone?: string;\n  description?: string;\n}\ninterface ISettingsGeneralProps {\n  user: IAgent | IAgency | any;\n}\n\nconst SettingsGeneral = (props: ISettingsGeneralProps) => {\n  const { user } = props;\n\n  const imageInputRef = useRef<HTMLInputElement>(null);\n\n  const [pending, setPending] = useState(false);\n  const [serverErrors, setServerErrors] = useState({});\n  const [userPhotoUrl, setUserPhotoUrl] = useState<null | string>(user.img);\n  const [cropperPhotoUrl, setCropperPhotoUrl] = useState<null | string>(null);\n  const [croppedPhoto, setCroppedPhoto] = useState<{\n    url: null | string;\n    file: null | File | Blob;\n  }>({\n    url: null,\n    file: null,\n  });\n\n  const [isAvaCropPage, setIsAvaCropPage] = useToggle(false);\n\n  const deletePhoto = () => {\n    if (window.confirm(\"Delete photo?\")) {\n      croppedPhoto.url\n        ? setCroppedPhoto({ url: null, file: null })\n        : setUserPhotoUrl(null);\n    }\n  };\n\n  const onSelectImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        if (file.type.startsWith(\"image\")) {\n          setPhotoHandler(file);\n          setIsAvaCropPage(true);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const setPhotoHandler = (file: File) => {\n    const url = URL.createObjectURL(file);\n\n    setCropperPhotoUrl(url);\n\n    //Delay for that the image not appear while the animation is in progress\n    setTimeout(() => {\n      setCroppedPhoto({ file: file, url });\n    }, 500);\n  };\n\n  const onCrop = (file: Blob) => {\n    setIsAvaCropPage(false);\n    setCroppedPhoto({ file: file, url: URL.createObjectURL(file) });\n\n    API.updateUserAvatar(croppedPhoto.file || userPhotoUrl)\n      .then(() => {\n        setPending(false);\n      })\n      .catch((err) => {\n        setPending(false);\n        setServerErrors(err.response.data.errors);\n        console.error(err);\n      });\n  };\n\n  const updateUser = (values: IUpdateUserForm) => {\n    setPending(true);\n    setServerErrors({});\n\n    API.updateUser({\n      ...values,\n      img: croppedPhoto.file || userPhotoUrl,\n    })\n      .then(() => {\n        setPending(false);\n      })\n      .catch((err) => {\n        setPending(false);\n        setServerErrors(err.response.data.errors);\n        console.error(err);\n      });\n  };\n\n  return (\n    <div className=\"settings-general\">\n      <div className=\"settings-general__header\">\n        <ReturnBtn route=\"/settings\" />\n\n        <h2 className=\"settings-general__title\">General</h2>\n      </div>\n\n      <Form\n        initialValues={{ ...user }}\n        validate={validateMainInfo}\n        onSubmit={updateUser}\n      >\n        {({ handleSubmit, submitting }) => (\n          <form onSubmit={handleSubmit}>\n            <DelayedComponent isMount={isAvaCropPage} delayUnmountTime={100}>\n              <div\n                className={classModifier(\"settings-general-cropper\", [\n                  isAvaCropPage && \"open\",\n                ])}\n              >\n                <div className=\"settings-general-cropper__cropper\">\n                  <ImgCropper\n                    image={cropperPhotoUrl || \"\"}\n                    onCrop={onCrop}\n                    onCancel={() => setIsAvaCropPage(false)}\n                    aspect={1}\n                    cropShape={\"round\"}\n                    classPrefix=\"avatar-cropper\"\n                  />\n                </div>\n              </div>\n            </DelayedComponent>\n\n            <div className=\"settings-general__avatar-select\">\n              <div className=\"settings-general__avatar\">\n                <LazyLoadImage\n                  src={\n                    croppedPhoto.url ||\n                    getContactAvatar({ img: userPhotoUrl, type: user.type })\n                  }\n                  classPrefix=\"round-img\"\n                  alt=\"avatar\"\n                />\n\n                {(croppedPhoto.url || userPhotoUrl) && (\n                  <button\n                    className=\"settings-general__avatar-icon\"\n                    type=\"button\"\n                    onClick={deletePhoto}\n                  >\n                    <TrashIcon />\n                  </button>\n                )}\n              </div>\n\n              <div className=\"settings-general__avatar-btn-wrap\">\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  ref={imageInputRef}\n                  onChange={onSelectImage}\n                  onClick={() =>\n                    imageInputRef.current && (imageInputRef.current.value = \"\")\n                  }\n                  style={{ display: \"none\" }}\n                />\n\n                <button\n                  className=\"settings-general__avatar-btn\"\n                  onClick={() => imageInputRef.current?.click()}\n                  type=\"button\"\n                >\n                  Choose Avatar\n                </button>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"label label--required\">\n                {user.type === 1 ? \"Full Name\" : \"Agency Name\"}\n              </label>\n\n              <Field\n                name=\"name\"\n                className=\"input\"\n                errorInputClass=\"input--error\"\n                errorClass=\"form-group__error\"\n                component={FormTextInput}\n                placeholder=\"Full Name\"\n                serverErrors={serverErrors}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"label label--optional\">Phone</label>\n\n              <Field\n                name=\"phone\"\n                type=\"tel\"\n                className=\"input\"\n                errorInputClass=\"input--error\"\n                errorClass=\"form-group__error\"\n                component={FormTextInput}\n                placeholder=\"Phone number\"\n                serverErrors={serverErrors}\n              />\n            </div>\n\n            {user.type === 2 && (\n              <div className=\"form-group\">\n                <label className=\"label label--optional\">Website</label>\n\n                <Field\n                  name=\"url\"\n                  className=\"input\"\n                  errorInputClass=\"input--error\"\n                  errorClass=\"form-group__error\"\n                  component={FormTextInput}\n                  placeholder=\"URL Website\"\n                  serverErrors={serverErrors}\n                />\n              </div>\n            )}\n\n            <div className=\"form-group\">\n              <label className=\"label label--optional\">\n                {user.type === 1 ? \"About Me\" : \"About Us\"}\n              </label>\n\n              <Field\n                name=\"description\"\n                className=\"settings-general__textarea textarea input\"\n                errorInputClass=\"input--error\"\n                errorClass=\"form-group__error\"\n                component={FormTextTextarea}\n                rows={3}\n                placeholder=\"Description\"\n                serverErrors={serverErrors}\n              />\n            </div>\n\n            <div className=\"settings-general__btns\">\n              <AsyncBtn\n                type=\"submit\"\n                className=\"btn btn--primary\"\n                spinnerSize=\"18px\"\n                pending={pending}\n                disabled={submitting}\n              >\n                Save\n              </AsyncBtn>\n            </div>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nconst validateMainInfo = ({ name }: { name: string }) => {\n  const errors: any = {};\n\n  if (validateFormValues.isEmpty(name)) {\n    errors.name = \"This field can`t be empty\";\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  user: state.user.user,\n});\n\nexport default connect(mapStateToProps)(SettingsGeneral);\n","import React from 'react';\n\nimport SettingsGeneral from '../../containers/SettingsGeneral/SettingsGeneral';\n\nconst SettingsGeneralPage = () => {\n  console.log('SettingsGeneral Render');\n  return (\n    <SettingsGeneral />\n  );\n}\n\nexport default SettingsGeneralPage;"],"sourceRoot":""}