{"version":3,"sources":["icons/clock.svg","containers/SettingsSchedule/SettingsSchedule.types.ts","containers/SettingsSchedule/SettingsSchedule.tsx","pages/SettingsPage/SettingsSchedulePage.tsx"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","_ref3","d","_ref4","SvgClock","_ref","svgRef","title","titleId","props","xmlns","fill","viewBox","ref","id","ForwardRef","DAYS_OF_WEEK","modeOptions","every_day","value","label","weekdays","custom","SettingsSchedule","fieldsRef","useRef","useState","pending","setPending","mode","timeData","everydayWeekdays","data","setData","useDidMount","API","getWorkTime","then","current_mode","every_day_times","custom_times","catch","console","error","timeOptions","useMemo","date","Date","setHours","valueTime","toLocaleString","hour","minute","hour12","labelTime","push","onChangeTimeHandler","index","type","prev","updatedTimeData","modeTimeData","dayWorkTime","to","fromTimestamp","slice","from","getValues","config","times","setWorkTime","times_for_mode","everyday","getTimeSelectMenuStyle","menu","provided","isMenuUp","elem","windowHeight","window","innerHeight","getBoundingClientRect","bottom","isOpenMenuUp","current","top","CustomDropdownIndicator","innerProps","className","getSelectValue","find","option","Spinner","size","ReturnBtn","route","classNamePrefix","isSearchable","defaultValue","options","values","onChange","onChangeModeHandler","components","IndicatorSeparator","map","day","inst","maxMenuHeight","styles","DropdownIndicator","isOptionDisabled","toValue","fromValue","getIsOptionDisabled","SettingsSchedulePage","log"],"mappings":"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","file":"static/js/SettingsScheduleChunk.4c44c576.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null);\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 19.2a7.2 7.2 0 100-14.4 7.2 7.2 0 000 14.4zm0-12.96a5.76 5.76 0 110 11.52 5.76 5.76 0 010-11.52z\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11.52 13.2h3.12v-1.44h-2.4V8.88H10.8v3.6a.72.72 0 00.72.72z\"\n});\n\nfunction SvgClock(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"#000\",\n    viewBox: \"4.8 4.8 14.4 14.4\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClock);\nexport default __webpack_public_path__ + \"static/media/clock.f28c111f.svg\";\nexport { ForwardRef as ReactComponent };","export type ModeType = \"every_day\" | \"weekdays\" | \"custom\";\n\nexport interface IDay {\n  day: string;\n  from: string;\n  to: string;\n}\n\nexport interface IData {\n  mode: ModeType;\n  timeData: {\n    everydayWeekdays: IDay[];\n    custom: IDay[];\n  };\n}\n\nexport const DAYS_OF_WEEK = [\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n  \"Sunday\",\n];\n\nexport const modeOptions = {\n  every_day: { value: \"every_day\", label: \"Every day\" },\n  weekdays: { value: \"weekdays\", label: \"Weekdays\" },\n  custom: { value: \"custom\", label: \"Custom\" },\n};\n","import { useState, useRef, MutableRefObject, useMemo } from \"react\";\nimport Select, { IndicatorProps } from \"react-select\";\n\nimport API from \"../../api/api\";\nimport { ReactSelectOption, IAnyObject } from \"../../interfaces/interfaces\";\nimport { useDidMount } from \"../../hooks\";\n\nimport \"./SettingsSchedule.scss\";\nimport {\n  IDay,\n  IData,\n  ModeType,\n  modeOptions,\n  DAYS_OF_WEEK,\n} from \"./SettingsSchedule.types\";\nimport ReturnBtn from \"../../components/ReturnBtn/ReturnBtn\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport { ReactComponent as ClockIcon } from \"../../icons/clock.svg\";\n\nconst IS_HOUR_12 = true;\nconst MAX_MENU_HEIGHT = 200;\nconst ONE_HOUR_MS = 3600000;\n\nconst SettingsSchedule = () => {\n  const fieldsRef = useRef({}) as MutableRefObject<IAnyObject>;\n\n  const [pending, setPending] = useState(true);\n  const [data, setData] = useState<IData>({\n    mode: \"every_day\",\n    timeData: {\n      everydayWeekdays: [],\n      custom: [],\n    },\n  });\n\n  useDidMount(() => {\n    API.getWorkTime()\n      .then(({ data }) => {\n        setData({\n          mode: data.current_mode,\n          timeData: {\n            everydayWeekdays: [data.every_day_times],\n            custom: data.custom_times,\n          },\n        });\n\n        setPending(false);\n      })\n      .catch(console.error);\n  });\n\n  const timeOptions = useMemo(() => {\n    let date = new Date().setHours(0, 0, 0, 0);\n    let timeOptions: ReactSelectOption[] = [{ value: \"None\", label: \"None\" }];\n\n    for (let i = 0; i < 24; i++) {\n      const valueTime = new Date(date).toLocaleString(\"ru-RU\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: false,\n      });\n\n      const labelTime = new Date(date).toLocaleString(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: IS_HOUR_12,\n      });\n\n      timeOptions.push({\n        value: valueTime,\n        label: labelTime,\n      });\n\n      date += 3600000;\n    }\n\n    timeOptions.push({ value: \"24:00\", label: \"Midnight\" });\n\n    return timeOptions;\n  }, []);\n\n  const getIsOptionDisabled = (\n    { value: toValue, label }: ReactSelectOption,\n    index: number\n  ) => {\n    const fromValue = (\n      data.mode === \"custom\"\n        ? data.timeData.custom\n        : data.timeData.everydayWeekdays\n    )[index].from;\n\n    const fromTimestamp = new Date().setHours(\n      +fromValue.slice(0, 2),\n      +fromValue.slice(3),\n      0,\n      0\n    );\n    const toTimestamp = new Date().setHours(\n      +toValue.slice(0, 2),\n      +toValue.slice(3),\n      0,\n      0\n    );\n\n    return fromTimestamp >= toTimestamp && label !== \"24:00\";\n  };\n\n  const onChangeModeHandler = (value: ModeType) => {\n    if (data.mode === value) return;\n\n    setData((prev) => ({ ...prev, mode: value }));\n\n    const config = {\n      mode: value,\n      times:\n        value === \"custom\"\n          ? data.timeData.custom\n          : data.timeData.everydayWeekdays[0],\n    };\n\n    API.setWorkTime(config)\n      .then(({ data }) => {\n        setData({\n          mode: data.mode,\n          timeData: {\n            everydayWeekdays: [data.times_for_mode.everyday],\n            custom: data.times_for_mode.custom,\n          },\n        });\n      })\n      .catch(console.error);\n  };\n\n  const onChangeTimeHandler = (\n    value: string,\n    index: number,\n    type: \"from\" | \"to\"\n  ) => {\n    if (\n      (data.mode === \"custom\"\n        ? data.timeData.custom\n        : data.timeData.everydayWeekdays)[index][type] === value\n    )\n      return;\n\n    const getValues = (dayWorkTime: IDay, type: \"from\" | \"to\") => {\n      if (type === \"to\") {\n        return { ...dayWorkTime, to: value };\n      } else {\n        const fromTimestamp = new Date().setHours(\n          +value.slice(0, 2),\n          +value.slice(3),\n          0,\n          0\n        );\n        const toTimestamp = new Date().setHours(\n          +dayWorkTime.to.slice(0, 2),\n          +dayWorkTime.to.slice(3),\n          0,\n          0\n        );\n\n        // If \"from\" time is more than \"to\" - set \"to\" time one hour more than \"from\"\n        if (fromTimestamp >= toTimestamp) {\n          return {\n            ...dayWorkTime,\n            from: value,\n            to: new Date(fromTimestamp + ONE_HOUR_MS).toLocaleString(\"us-US\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              hour12: false,\n            }),\n          };\n        } else {\n          return { ...dayWorkTime, from: value };\n        }\n      }\n    };\n\n    setData((prev) => {\n      const updatedTimeData = { ...prev };\n\n      const modeTimeData =\n        data.mode === \"custom\"\n          ? updatedTimeData.timeData.custom\n          : updatedTimeData.timeData.everydayWeekdays;\n\n      modeTimeData[index] = getValues(modeTimeData[index], type);\n\n      return updatedTimeData;\n    });\n\n    const config = {\n      mode: data.mode,\n      times:\n        data.mode === \"custom\"\n          ? data.timeData.custom\n          : data.timeData.everydayWeekdays[0],\n    };\n\n    API.setWorkTime(config)\n      .then(({ data }) => {\n        setData({\n          mode: data.mode,\n          timeData: {\n            everydayWeekdays: [data.times_for_mode.everyday],\n            custom: data.times_for_mode.custom,\n          },\n        });\n      })\n      .catch(console.error);\n  };\n\n  const isOpenMenuUp = (elem: HTMLDivElement) => {\n    const windowHeight = window.innerHeight;\n    const menuOffset = elem.getBoundingClientRect().bottom + MAX_MENU_HEIGHT;\n\n    return menuOffset >= windowHeight - 95;\n  };\n\n  const getTimeSelectMenuStyle = (index: number) => ({\n    menu: (provided: IAnyObject) => {\n      const isMenuUp = isOpenMenuUp(fieldsRef.current[index]);\n\n      return {\n        ...provided,\n        top: isMenuUp ? \"auto\" : provided.top,\n        bottom: isMenuUp ? \"100%\" : provided.bottom,\n      };\n    },\n  });\n\n  const CustomDropdownIndicator = (\n    props: IndicatorProps<ReactSelectOption, false>\n  ) => (\n    <div\n      {...props.innerProps}\n      className=\"time-select__indicator time-select__dropdown-indicator\"\n    >\n      <ClockIcon />\n    </div>\n  );\n\n  const getSelectValue = (timeOptions: ReactSelectOption[], value: string) => {\n    return timeOptions.find(\n      (option: ReactSelectOption) => option.value === value\n    );\n  };\n\n  if (pending) {\n    return (\n      <div className=\"settings-schedule__spinner\">\n        <Spinner size=\"150px\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-schedule\">\n      <div className=\"settings-schedule__header\">\n        <ReturnBtn route=\"/settings\" />\n\n        <h2 className=\"settings-schedule__title\">Schedule</h2>\n      </div>\n\n      <div className=\"settings-schedule__main\">\n        <div className=\"settings-schedule__mode\">\n          <label className=\"label\">Choose mode</label>\n\n          <Select\n            className=\"mode-select\"\n            classNamePrefix=\"mode-select\"\n            isSearchable={false}\n            value={modeOptions[data.mode]}\n            defaultValue={modeOptions.custom}\n            options={Object.values(modeOptions)}\n            onChange={(value) =>\n              value && onChangeModeHandler(value.value as ModeType)\n            }\n            components={{\n              IndicatorSeparator: null,\n            }}\n          />\n        </div>\n\n        <div className=\"settings-schedule__fields\">\n          {(data.mode === \"custom\"\n            ? data.timeData.custom\n            : data.timeData.everydayWeekdays\n          ).map((day: IDay, index: number) => (\n            <div\n              key={day.day}\n              className=\"settings-schedule__field\"\n              ref={(inst) => (fieldsRef.current[index] = inst)}\n            >\n              <div className=\"settings-schedule__field-wrap\">\n                <label className=\"label\">\n                  {data.mode !== \"custom\" ? \"Start at\" : DAYS_OF_WEEK[index]}\n                </label>\n\n                <Select\n                  className=\"time-select\"\n                  classNamePrefix=\"time-select\"\n                  isSearchable={false}\n                  options={timeOptions.slice(0, timeOptions.length - 1)}\n                  defaultValue={timeOptions[17]}\n                  maxMenuHeight={MAX_MENU_HEIGHT}\n                  styles={getTimeSelectMenuStyle(index)}\n                  value={getSelectValue(timeOptions, day.from)}\n                  onChange={(value) =>\n                    value && onChangeTimeHandler(value.value, index, \"from\")\n                  }\n                  components={{\n                    IndicatorSeparator: null,\n                    DropdownIndicator: CustomDropdownIndicator,\n                  }}\n                />\n              </div>\n\n              {(data.mode === \"custom\"\n                ? data.timeData.custom\n                : data.timeData.everydayWeekdays)[index].from !== \"None\" && (\n                <>\n                  <span className=\"settings-schedule__time-divider\"></span>\n\n                  <div className=\"settings-schedule__field-wrap\">\n                    {data.mode !== \"custom\" && (\n                      <label className=\"label\">Ends at</label>\n                    )}\n\n                    <Select\n                      className=\"time-select\"\n                      classNamePrefix=\"time-select\"\n                      isSearchable={false}\n                      options={timeOptions.slice(2)}\n                      defaultValue={timeOptions[33]}\n                      maxMenuHeight={MAX_MENU_HEIGHT}\n                      styles={getTimeSelectMenuStyle(index)}\n                      value={getSelectValue(timeOptions, day.to)}\n                      onChange={(value) =>\n                        value && onChangeTimeHandler(value.value, index, \"to\")\n                      }\n                      isOptionDisabled={(option) =>\n                        getIsOptionDisabled(option, index)\n                      }\n                      components={{\n                        IndicatorSeparator: null,\n                        DropdownIndicator: CustomDropdownIndicator,\n                      }}\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsSchedule;\n","import React from 'react';\n\nimport SettingsSchedule from '../../containers/SettingsSchedule/SettingsSchedule';\n\nconst SettingsSchedulePage = () => {\n  console.log('SettingsSchedule Render');\n  return (\n    <SettingsSchedule />\n  );\n}\n\nexport default SettingsSchedulePage;"],"sourceRoot":""}